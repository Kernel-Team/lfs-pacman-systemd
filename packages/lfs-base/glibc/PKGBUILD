#-*-mode:sh-*-
# Maintainer: alexforsale@yahoo.com
pkgbase=glibc
pkgname=(glibc lib32-glibc libx32-glibc)
pkgver=2.30
pkgrel=1
pkgdesc="contains the main C library"
license=(GPL LGPL)
options=(!strip staticlibs)
arch=('x86_64')
_deps=('gd' 'lib32-gcc-libs' 'libx32-gcc-libs')
depends=('linux-api-headers')
#_commit=0b8c2f95df589c9c1ad25312475049bcc7ed7059
source=(http://ftp.gnu.org/gnu/$pkgbase/$pkgbase-$pkgver.tar.xz{,.sig}
        http://www.linuxfromscratch.org/patches/lfs/9.0-rc1/$pkgbase-$pkgver-fhs-1.patch
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        libx32-glibc.conf
       )
validpgpkeys=(7273542B39962DF7B299931416792B4EA25340F8) # Carlos O'Donell

for _d in "${_deps[@]}";do
    if [[ "$(pacman -Ss ^${_d}$ 2>/dev/null)" ]];then
        depends+=( "${_d}")
        pkgrel=$((pkgrel+1))
    else
        case $_d in
            'gd')
                optdepends+=( 'gd: for memusagestat')
                ;;
            *)
                optdepends+=( "$_d")
                ;;
        esac
    fi
done

prepare(){
    if [[ ! -d /usr/lib/gcc ]] && [[ ! -L /usr/lib/gcc ]];then
        msg2 "/usr/lib/gcc doesn't exist! exiting..."
        return 1
    fi

    mkdir -p glibc-build lib32-glibc-build libx32-glibc-build

    [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc 
    cd glibc

    patch -Np1 -i ../$pkgbase-$pkgver-fhs-1.patch

    local _configure_flags=(
        --prefix=/usr
        --with-headers=/usr/include
        --enable-add-ons
        --enable-bind-now
        --enable-lock-elision
        --enable-multi-arch
        --enable-stack-protector=strong
        --enable-stackguard-randomization
        --enable-static-pie
        --disable-profile
        --disable-werror
        --enable-cet
    )

    cd "$srcdir/glibc-build"

    echo "slibdir=/usr/lib" >> configparms

    # remove fortify for building libraries
    CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/} \
            # In chroot, uncomment the following three lines to avoid invalid paths
            # in debug symbols, however, you will also need to guard "make -k" to avoid
            # an incorrect replacment of the real /usr/include/limits.h
            _gccver=$(gcc --version | grep -o "[0-9]\.[0-9]\.[0-9]") \
                GCC_INCDIR="/usr/lib/gcc/${CARCH}/${_gccver}/include" \
                CC="gcc -isystem $GCC_INCDIR -isystem /usr/include" \
                "$srcdir/$pkgbase-$pkgver/configure" \
                --libdir=/usr/lib \
                --libexecdir=/usr/lib \
                ${_configure_flags[@]}
    
    cd "$srcdir/lib32-glibc-build"
    echo "slibdir=/usr/lib32" >> configparms
    echo "rtlddir=/usr/lib32" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    # In chroot, uncomment the following three lines to avoid invalid paths
    # in debug symbols, however, you will also need to guard "make -k" to avoid
    # an incorrect replacment of the real /usr/include/limits.h
    _gccver=$(gcc --version | grep -o "[0-9]\.[0-9]\.[0-9]") \
           GCC_INCDIR="/usr/lib/gcc/${CARCH}/${_gccver}/include" \
           CC="gcc -m32 -mstackrealign -isystem $GCC_INCDIR -isystem /usr/include" \
           CXX="g++ -m32 -mstackrealign -isystem $GCC_INCDIR -isystem /usr/include" \
           CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/} \
           CFLAGS=${CFLAGS/-fno-plt/} \
           CXXFLAGS=${CXXFLAGS/-fno-plt/} \
           "$srcdir/$pkgbase-$pkgver/configure" \
           --host=i686-pc-linux-gnu \
           --libdir=/usr/lib32 \
           --libexecdir=/usr/lib32 \
           ${_configure_flags[@]}

    cd "$srcdir/libx32-glibc-build"
    echo "slibdir=/usr/libx32" >> configparms
    echo "rtlddir=/usr/libx32" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    # In chroot, uncomment the following three lines to avoid invalid paths
    # in debug symbols, however, you will also need to guard "make -k" to avoid
    # an incorrect replacment of the real /usr/include/limits.h
    _gccver=$(gcc --version | grep -o "[0-9]\.[0-9]\.[0-9]") \
           GCC_INCDIR="/usr/lib/gcc/${CARCH}/${_gccver}/include" \
           CC="gcc -mx32 -isystem $GCC_INCDIR -isystem /usr/include" \
           CXX="g++ -mx32 -isystem $GCC_INCDIR -isystem /usr/include" \
           CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/} \
           CFLAGS=${CFLAGS/-fno-plt/} \
           CXXFLAGS=${CXXFLAGS/-fno-plt/} \
           "$srcdir/$pkgbase-$pkgver/configure" \
           --host=x86_64-pc-linux-gnux32 \
           --libdir=/usr/libx32 \
           --libexecdir=/usr/libx32 \
           ${_configure_flags[@]}
}

build(){
    cd "$srcdir/glibc-build"
    # build libraries with fortify disabled
    echo "build-programs=no" >> configparms
    make
    # re-enable fortify for programs
    sed -i "/build-programs=/s#no#yes#" configparms

    echo "CC += -D_FORTIFY_SOURCE=2" >> configparms
    echo "CXX += -D_FORTIFY_SOURCE=2" >> configparms
    make

    cd "$srcdir/lib32-glibc-build"
    # build libraries with fortify disabled
    echo "build-programs=no" >> configparms
    make

    # re-enable fortify for programs
    sed -i "/build-programs=/s#no#yes#" configparms

    echo "CC += -D_FORTIFY_SOURCE=2" >> configparms
    echo "CXX += -D_FORTIFY_SOURCE=2" >> configparms
    make

    cd "$srcdir/libx32-glibc-build"
    # build libraries with fortify disabled
    echo "build-programs=no" >> configparms
    make

    # re-enable fortify for programs
    sed -i "/build-programs=/s#no#yes#" configparms

    echo "CC += -D_FORTIFY_SOURCE=2" >> configparms
    echo "CXX += -D_FORTIFY_SOURCE=2" >> configparms
    make
}

check(){
    cd glibc-build

    # remove fortify in preparation to run test-suite
    sed -i '/FORTIFY/d' configparms

    # some failures are "expected"
    make check || true

    # Get test rusults together into one file
    for file in `find . -name "*.sum"`
    do
        cat $file >> tests-summary
    done
}

package_glibc(){
    pkgdesc='GNU C Library'
    depends=('linux-api-headers>=4.10'
            )
    optdepends=('gd: for memusagestat')
    install=glibc.install
    backup=(etc/gai.conf
            etc/locale.gen
            etc/nscd.conf)
    groups=('lfs-base')

    sed '/test-installation/s@$(PERL)@echo not running@' -i glibc/Makefile

    make -C glibc-build install_root="$pkgdir" install
    rm -f "$pkgdir"/etc/ld.so.{cache,conf}

    # Shipped in tzdata
    rm -f "$pkgdir"/usr/bin/tzselect
    rm -f "$pkgdir"/usr/sbin/zic
    rm -f "$pkgdir"/usr/bin/zdump
    
    install -dm755 "$pkgdir/etc"

    cd glibc

    install -dm755 "$pkgdir"/usr/lib/{locale,tmpfiles.d}
    install -dm755 "$pkgdir"/lib/systemd/system
    install -m644 nscd/nscd.conf "$pkgdir/etc/nscd.conf"
    install -m644 nscd/nscd.service "$pkgdir/lib/systemd/system"
    install -m644 nscd/nscd.tmpfiles "$pkgdir/usr/lib/tmpfiles.d/nscd.conf"
    install -dm755 "$pkgdir/var/cache/nscd"

    install -m644 posix/gai.conf "$pkgdir"/etc/gai.conf

    install -m755 "$srcdir/locale-gen" "$pkgdir/usr/bin"

    # Create /etc/locale.gen
    install -m644 "$srcdir/locale.gen.txt" "$pkgdir/etc/locale.gen"

    # uncomment locales by default required for LFS testsuites
    echo "# These locales are requried for LFS testsuites, do not comment out" \
         >> "${pkgdir}/etc/locale.gen"
    echo "cs_CZ.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "de_DE ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
    echo "de_DE@euro ISO-8859-15" >> "${pkgdir}/etc/locale.gen"
    echo "de_DE.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "en_GB.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "en_HK ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
    echo "en_PH ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
    echo "en_US ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
    echo "en_US.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "es_MX ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
    echo "fa_IR UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "fr_FR ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
    echo "fr_FR@euro ISO-8859-15" >> "${pkgdir}/etc/locale.gen"
    echo "fr_FR.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "it_IT ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
    echo "it_IT.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "ja_JP EUC-JP" >> "${pkgdir}/etc/locale.gen"
    echo "ru_RU.KOI8-R KOI8-R" >> "${pkgdir}/etc/locale.gen"
    echo "ru_RU.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "tr_TR.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
    echo "zh_CN.GB18030 GB18030" >> "${pkgdir}/etc/locale.gen"
    echo "" >> "${pkgdir}/etc/locale.gen"
    sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
        "$srcdir/$pkgbase-$pkgver/localedata/SUPPORTED" >> "$pkgdir/etc/locale.gen"

    install -v -d -m755 "${pkgdir}/lib"
    ln -sv ../lib64/ld-linux-x86-64.so.2 "${pkgdir}"/lib/ld-linux-x86-64.so.2
    ln -s ../lib/ld-linux-x86-64.so.2 "${pkgdir}/lib64/ld-lsb-x86-64.so.3"
    
    if check_option 'debug' n; then
        find "$pkgdir"/usr/bin -type f -executable -exec strip $STRIP_BINARIES {} + 2> /dev/null || true
        find "$pkgdir"/usr/lib -name '*.a' -type f -exec strip $STRIP_STATIC {} + 2> /dev/null || true

        # Do not strip these for gdb and valgrind functionality, but strip the rest
        find "$pkgdir"/usr/lib \
             -not -name 'ld-*.so' \
             -not -name 'libc-*.so' \
             -not -name 'libpthread-*.so' \
             -not -name 'libthread_db-*.so' \
             -name '*-*.so' -type f -exec strip $STRIP_SHARED {} + 2> /dev/null || true
    fi
}

package_lib32-glibc(){
    pkgdesc='GNU C Library (32-bit)'
    depends=("glibc=$pkgver")
    groups=('lfs-base' 'lfs-multilib')
    cd lib32-glibc-build

    make install_root="$pkgdir" install
    rm -rf "$pkgdir"/{etc,sbin,usr/{bin,sbin,share},var}

    # We need to keep 32 bit specific header files
    find "$pkgdir/usr/include" -type f -not -name '*-32.h' -delete

    # Dynamic linker
    install -d "$pkgdir/usr/lib"
    ln -s ../lib32/ld-linux.so.2 "$pkgdir/usr/lib/"

    # Add lib32 paths to the default library search path
    install -Dm644 "$srcdir/lib32-glibc.conf" "$pkgdir/etc/ld.so.conf.d/lib32-glibc.conf"

    # Symlink /usr/lib32/locale to /usr/lib/locale
    ln -s ../lib/locale "$pkgdir/usr/lib32/locale"

    if check_option 'debug' n; then
        find "$pkgdir"/usr/lib32 -name '*.a' -type f -exec strip $STRIP_STATIC {} + 2> /dev/null || true
        find "$pkgdir"/usr/lib32 \
             -not -name 'ld-*.so' \
             -not -name 'libc-*.so' \
             -not -name 'libpthread-*.so' \
             -not -name 'libthread_db-*.so' \
             -name '*-*.so' -type f -exec strip $STRIP_SHARED {} + 2> /dev/null || true
    fi
}

package_libx32-glibc(){
    pkgdesc='GNU C Library (x32-bit)'
    depends=("glibc=$pkgver")
    groups=('lfs-base' 'lfs-multilib')
    cd libx32-glibc-build

    make install_root="$pkgdir" install
    rm -rf "$pkgdir"/{etc,sbin,usr/{bin,sbin,share},var}

    # We need to keep x32 bit specific header files
    find "$pkgdir/usr/include" -type f -not -name '*-x32.h' -delete

    # Dynamic linker
    install -d "$pkgdir/usr/lib"
    ln -s ../libx32/ld-linux-x32.so.2 "$pkgdir/usr/lib/"

    # Add libx32 paths to the default library search path
    install -Dm644 "$srcdir/libx32-glibc.conf" "$pkgdir/etc/ld.so.conf.d/libx32-glibc.conf"

    # Symlink /usr/lib32/locale to /usr/lib/locale
    ln -s ../lib/locale "$pkgdir/usr/libx32/locale"

    if check_option 'debug' n; then
        find "$pkgdir"/usr/libx32 -name '*.a' -type f -exec strip $STRIP_STATIC {} + 2> /dev/null || true
        find "$pkgdir"/usr/libx32 \
             -not -name 'ld-*.so' \
             -not -name 'libc-*.so' \
             -not -name 'libpthread-*.so' \
             -not -name 'libthread_db-*.so' \
             -name '*-*.so' -type f -exec strip $STRIP_SHARED {} + 2> /dev/null || true
    fi
}

md5sums=('2b1dbdf27b28620752956c061d62f60c'
         'SKIP'
         '9a5997c3452909b1769918c759eff8a2'
         '07ac979b6ab5eeb778d55f041529d623'
         '476e9113489f93b348b21e144b6a8fcf'
         '163c47e67d18e05f8d037cad94fdb216'
         '0b8da4a812376e0375d1c364ec3ee366')
