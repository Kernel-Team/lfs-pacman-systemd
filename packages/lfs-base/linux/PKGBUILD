#-*-mode:sh-*-
# Maintainer: alexforsale@yahoo.com
pkgbase=linux
pkgname=("$pkgbase" "$pkgbase-headers")
pkgver=5.2.9
pkgrel=1
arch=(x86_64)
url="kernel.org"
license=(GPL2)
_deps=('dracut')
_makedeps=('python-sphinx' 'graphviz')
options=('!strip')
source=(https://www.kernel.org/pub/linux/kernel/v4.x/linux-${pkgver}.tar.{xz,sign}
        "config" "60-linux.hook" "90-linux.hook" "lfs-base.config")
validpgpkeys=(
    'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
    '647F28654894E3BD457199BE38DBBDC86092693E')  # Greg Kroah-Hartman
groups=('lfs-base')
md5sums=('SKIP')

if [[ "$(pacman -Qq "python-sphinx" 2>/dev/null)" ]] &&
       [[ "$(pacman -Qq "graphviz" 2>/dev/null)" ]];then
    pkgname+=( "$pkgbase-docs")
    pkgrel=$((pkgrel+1))
fi

for _d in "${_deps[@]}";do
    if [[ "$(pacman -Qq "${_d}" 2>/dev/null)" ]];then
        depends+=( "${_d}")
        pkgrel=$((pkgrel+1))
    else
        optdepends+=( "${_d}")
    fi
done

for _m in "${_makedeps[@]}";do
    if [[ "$(pacman -Qq "${_m}" 2>/dev/null)" ]];then
        makedepends+=( "${_m}")
        pkgrel=$((pkgrel+1))
    else
        optdepends+=( "${_m}")
    fi
done

_kernelname=${pkgbase#linux}
: ${_kernelname:=-ARCH}

prepare() {
    cd $pkgbase-${pkgver}

    msg2 "Setting version..."
    scripts/setlocalversion --save-scmversion

    # patches
    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        [[ $src = *.patch ]] || continue
        msg2 "Applying patch $src..."
        patch -Np1 < "../$src"
    done

    msg2 "Setting config..."
    cp ../config arch/x86/configs/linuxfromscratch_defconfig
    make linuxfromscratch_defconfig

    # needed config by lfs (chapter 8).
    msg2 "merging lfs-base.config..."
    ./scripts/kconfig/merge_config.sh .config ${srcdir}/lfs-base.config

    # merge all config files found in /usr/local/share/linuxfromscratch/kernel_configs/
    if [[ -d /usr/local/share/linuxfromscratch/kernel_configs ]];then
        msg2 "merging blfs kernel configurations..."
        for configs in /usr/local/share/linuxfromscratch/kernel_configs/*.config;do
            msg2 "merging $(basename $configs) configuration file..."
            ./scripts/kconfig/merge_config.sh .config $configs
        done
    fi

    make -s kernelrelease > ../version
    msg2 "Prepared %s version %s" "$pkgbase" "$(<../version)"
}

#pkgver(){
#  echo $(cat version) | sed 's/\([^-]*-g\)/r\1/;s/-/./g'
#}

build(){
    cd $pkgbase-${pkgver}

    _mod=('bzImage' 'modules')
    if [[ -z "$(pacman -Qq ${_makedeps[@]} 2>&1 >/dev/null)" ]];then
        _mod+=( 'htmldocs')
    fi
    make ${_mod[@]}
    make -C tools/objtool
}

package_linux(){
    pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
    depends=(coreutils linux-firmware kmod)
    optdepends=('crda: to set the correct wireless channels of your country')
    install=linux.install

    local kernver="$(<version)"
    local modulesdir="$pkgdir/lib/modules/$kernver"

    cd $pkgbase-${pkgver}
    msg2 "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"
    install -Dm644 "$modulesdir/vmlinuz" "$pkgdir/boot/vmlinuz-$pkgbase"

    msg2 "Installing modules..."
    make INSTALL_MOD_PATH="$pkgdir" modules_install

    # a place for external modules,
    # with version file for building modules and running depmod from hook
    local extramodules="extramodules$_kernelname"
    local extradir="$pkgdir/lib/modules/$extramodules"
    install -Dt "$extradir" -m644 ../version
    ln -sr "$extradir" "$modulesdir/extramodules"

    # remove build and source links
    rm "$modulesdir"/{source,build}

    # hack to allow specifying an initially nonexisting install file
    sed "$subst" "$startdir/$install" > "$startdir/$install.pkg"
    true && install=$install.pkg

    sed "$subst" ../60-linux.hook | install -Dm644 /dev/stdin \
                                            "$pkgdir/usr/share/libalpm/hooks/60-$pkgbase.hook"
    sed "$subst" ../90-linux.hook | install -Dm644 /dev/stdin \
                                            "$pkgdir/usr/share/libalpm/hooks/90-$pkgbase.hook"
    msg2 "Fixing permissions..."
    chmod -Rc u=rwX,go=rX "$pkgdir"
}

package_linux-headers(){
    pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"

    local builddir="$pkgdir/lib/modules/$(<version)/build"

    cd $pkgbase-${pkgver}
    msg2 "Installing build files..."
    install -Dt "$builddir" -m644 Makefile .config Module.symvers System.map vmlinux
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts

    # add objtool for external module building and enabled VALIDATION_STACK option
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # add xfs and shmem for aufs building
    mkdir -p "$builddir"/{fs/xfs,mm}

    # ???
    mkdir "$builddir/.tmp_versions"

    msg2 "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # http://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # http://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    msg2 "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    msg2 "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    msg2 "Removing documentation..."
    rm -r "$builddir/Documentation"

    msg2 "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    msg2 "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    msg2 "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -bi "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
                strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
                strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
                strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
                strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    msg2 "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase-$pkgver"

    msg2 "Fixing permissions..."
    chmod -Rc u=rwX,go=rX "$pkgdir"
}

package_linux-docs(){
    pkgdesc="Kernel hackers manual - HTML documentation that comes with the ${pkgbase/linux/Linux} kernel"

    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    cd $pkgbase-${pkgver}

    msg2 "Installing documentation..."
    mkdir -p "$builddir"
    cp -t "$builddir" -a Documentation

    msg2 "Removing doctrees..."
    rm -r "$builddir/Documentation/output/.doctrees"

    msg2 "Moving HTML docs..."
    local src dst
    while read -rd '' src; do
        dst="$builddir/Documentation/${src#$builddir/Documentation/output/}"
        mkdir -p "${dst%/*}"
        mv "$src" "$dst"
        rmdir -p --ignore-fail-on-non-empty "${src%/*}"
    done < <(find "$builddir/Documentation/output" -type f -print0)

    msg2 "Adding symlink..."
    mkdir -p "$pkgdir/usr/share/doc"
    ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"

    msg2 "Fixing permissions..."
    chmod -Rc u=rwX,go=rX "$pkgdir"
}

md5sums=('d7162b4421327c756b1d548204fd8fb1'
         'SKIP'
         '47d32aeb1bb75b47f949817599330e19'
         'e0d72f1162d1f86c48acfd32db8ad154'
         '3ad191a1db71366de70d34f62c4408ca'
         '4811c3c4d5a217ab1e89e0d4cf1781ee')
